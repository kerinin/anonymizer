(function() {
  var capitalize, coffeescript, colorize, colors, express, extend, formatDate, getColor, growl, pad, path, _base,
    __hasProp = Object.prototype.hasOwnProperty,
    __slice = Array.prototype.slice;

  coffeescript = require('coffee-script');

  express = require('express');

  growl = require('growl');

  path = require('path');

  if ((_base = require.extensions)['.coffee'] == null) {
    _base['.coffee'] = function(module, filename) {
      var content;
      content = coffeescript.compile(fs.readFileSync(filename, 'utf8', {
        filename: filename
      }));
      return module._compile(content, filename);
    };
  }

  exports.extend = extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      if (!__hasProp.call(properties, key)) continue;
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  colors = {
    black: 30,
    red: 31,
    green: 32,
    brown: 33,
    blue: 34,
    purple: 35,
    cyan: 36,
    gray: 37,
    none: '',
    reset: 0
  };

  getColor = function(color) {
    if (color == null) color = 'none';
    return colors[color.toString()];
  };

  colorize = function(text, color) {
    return "\033[" + (getColor(color)) + "m" + text + "\033[" + (getColor('reset')) + "m";
  };

  pad = function(number) {
    var num;
    num = "" + number;
    if (num.length < 2) {
      return "0" + num;
    } else {
      return num;
    }
  };

  formatDate = function(color) {
    var date, item, time, timeArr;
    if (color == null) color = 'none';
    date = new Date;
    timeArr = (function() {
      var _i, _len, _ref, _results;
      _ref = ['Hours', 'Minutes', 'Seconds'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(pad(date["get" + item]()));
      }
      return _results;
    })();
    time = timeArr.join(':');
    return colorize("[" + time + "]:", color);
  };

  exports.capitalize = capitalize = function(string) {
    return (string[0] || '').toUpperCase() + string.slice(1);
  };

  exports.formatClassName = function(filename) {
    return filename.split('_').map(capitalize).join('');
  };

  exports.isTesting = function() {
    return 'jasmine' in global;
  };

  exports.log = function(text, color, isError) {
    var output, stream;
    if (color == null) color = 'green';
    if (isError == null) isError = false;
    stream = isError ? process.stderr : process.stdout;
    output = "" + (formatDate(color)) + " " + text + "\n";
    if (!exports.isTesting()) stream.write(output, 'utf8');
    if (isError) {
      return growl(text, {
        title: 'Brunch error'
      });
    }
  };

  exports.logError = function(text) {
    return exports.log(text, 'red', true);
  };

  exports.logDebug = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, [formatDate('green')].concat(__slice.call(args)));
  };

  exports.exit = function() {
    if (exports.isTesting()) {
      return exports.logError('Terminated process');
    } else {
      return process.exit(0);
    }
  };

  exports.sort = function(files, config) {
    if (typeof config !== 'object') return files;
    if (config.before == null) config.before = [];
    if (config.after == null) config.after = [];
    return __slice.call(files).sort(function(a, b) {
      var aIsVendor, bIsVendor, hasA, hasB, indexOfA, indexOfB, _ref, _ref2;
      indexOfA = config.before.indexOf(a);
      indexOfB = config.before.indexOf(b);
      _ref = [indexOfA !== -1, indexOfB !== -1], hasA = _ref[0], hasB = _ref[1];
      if (hasA && !hasB) {
        return -1;
      } else if (!hasA && hasB) {
        return 1;
      } else if (hasA && hasB) {
        return indexOfA - indexOfB;
      } else {
        indexOfA = config.after.indexOf(a);
        indexOfB = config.after.indexOf(b);
        _ref2 = [indexOfA !== -1, indexOfB !== -1], hasA = _ref2[0], hasB = _ref2[1];
        if (hasA && !hasB) {
          return 1;
        } else if (!hasA && hasB) {
          return -1;
        } else if (hasA && hasB) {
          return indexOfA - indexOfB;
        } else {
          aIsVendor = (a.indexOf('vendor')) === 0;
          bIsVendor = (b.indexOf('vendor')) === 0;
          if (aIsVendor && !bIsVendor) {
            return -1;
          } else if (!aIsVendor && bIsVendor) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    });
  };

  exports.startServer = function(port, rootPath, callback) {
    var server;
    if (port == null) port = 3333;
    if (rootPath == null) rootPath = '.';
    if (callback == null) callback = (function() {});
    server = express.createServer();
    server.configure(function() {
      server.use(express.static(rootPath));
      server.set('views', rootPath);
      return server.set('view options', {
        layout: false
      });
    });
    server.get('/', function(req, res) {
      return res.render('index.html');
    });
    server.listen(parseInt(port, 10));
    server.on('listening', callback);
    return exports.log("[Brunch]: application starting on http://0.0.0.0:" + port + ".");
  };

  exports.loadConfig = function(configPath) {
    var config;
    try {
      config = require(path.resolve(configPath)).config;
    } catch (error) {
      exports.logError("[Brunch]: couldn\'t load config.coffee. " + error);
      exports.exit();
    }
    return config;
  };

}).call(this);
