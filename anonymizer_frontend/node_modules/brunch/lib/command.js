(function() {
  var argumentum, brunch, commandLineConfig, fs, helpers, path, readPackageVersion;

  argumentum = require('argumentum');

  fs = require('fs');

  path = require('path');

  brunch = require('./brunch');

  helpers = require('./helpers');

  exports.readPackageVersion = readPackageVersion = function() {
    var package;
    package = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json')));
    return package.version;
  };

  commandLineConfig = {
    script: 'brunch',
    commandRequired: true,
    commands: {
      "new": {
        help: 'Create new brunch project',
        options: {
          rootPath: {
            position: 1,
            help: 'application path',
            metavar: 'APP_PATH',
            required: true,
            full: 'appPath'
          },
          buildPath: {
            abbr: 'o',
            help: 'build path',
            metavar: 'DIRECTORY',
            full: 'output'
          }
        },
        callback: function(options) {
          return brunch["new"](options.rootPath, options.buildPath, function() {
            var config, configPath;
            configPath = path.join(options.rootPath, 'config.coffee');
            config = helpers.loadConfig(path.join(options.rootPath, 'config.coffee'));
            return brunch.build(options.rootPath, options.buildPath, config);
          });
        }
      },
      build: {
        help: 'Build a brunch project',
        options: {
          buildPath: {
            abbr: 'o',
            help: 'build path',
            metavar: 'DIRECTORY',
            full: 'output'
          }
        },
        callback: function(options) {
          var config;
          config = helpers.loadConfig('config.coffee');
          return brunch.build('.', options.buildPath, config);
        }
      },
      watch: {
        help: 'Watch brunch directory and rebuild if something changed',
        options: {
          buildPath: {
            abbr: 'o',
            full: 'output',
            help: 'build path',
            metavar: 'DIRECTORY'
          },
          server: {
            abbr: 's',
            flag: true,
            help: 'run a simple http server that would server `output` dir'
          },
          port: {
            abbr: 'p',
            "default": 3333,
            help: 'if a `server` option was specified, define on which port \
the server would run',
            metavar: 'PORT'
          }
        },
        callback: function(options) {
          var config;
          config = helpers.loadConfig('config.coffee');
          if (options.server) config.port = options.port;
          return brunch.watch('.', options.buildPath, config);
        }
      },
      generate: {
        help: 'Generate model, view or route for current project',
        options: {
          type: {
            position: 1,
            help: 'generator type',
            metavar: 'GENERATOR',
            choices: ['collection', 'model', 'router', 'style', 'template', 'view'],
            required: true
          },
          name: {
            position: 2,
            help: 'generator class name / filename',
            metavar: 'NAME',
            required: true
          }
        },
        callback: function(options) {
          return brunch.generate('.', options.type, options.name);
        }
      }
    },
    options: {
      version: {
        abbr: 'v',
        help: 'display brunch version',
        flag: true,
        callback: readPackageVersion
      }
    }
  };

  exports.run = function() {
    return argumentum.load(commandLineConfig).parse();
  };

}).call(this);
